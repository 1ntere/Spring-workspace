spring.application.name=AjaxDupCheck

#이제부터는 application.properties에는 name만 작성하고
#config.properties 파일을 생성해서 해당 파일에 아래 정보를 모두 작성할 것임
server.port=9055

spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521/xe
spring.datasource.username=KH_TEST
spring.datasource.password=KH1234

mybatis.mapper-locations=classpath:/mappers/*.xml
logging.level.com.zaxxer.hikari=DEBUG
logging.level.org.mybatis.spring=DEBUG

mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

#prefix : html 파일 위치
spring.mustache.prefix=classpath:/templates/
#suffix : 마지막으로 끝나는 파일 확장자명
spring.mustache.suffix=.html

#Thymeleaf 템플릿 엔진을 사용하지 않기 때문에 html 파일 위치를 바라보는 설정값 작성
#파일이 저장된 위치 경로를 설정
spring.mvc.static-path-pattern=/**
                              #/** : 모든 경로에 있는 파일들을 가져와서 경로 패턴을 확보
                              #      static 밑에 만드는 /image/   이미지 폴더 밑에 이미지들이나
                              #      static 밑에 만드는 /css/     css 폴더 밑에 만드는 css파일들이나
                              #      static 밑에 만드는 /js/      js 폴더 밑에 만드는 js파일들이나
                              #      static 밑에 만드는 /html/    html 폴더 밑에 만드는 html파일 등
                              #      static 밑에 만드는           모든 파일들의 경로를 확인하겠다는 의미
#static 폴더 밑에 위치한 모든 파일을 java에서 사용할 수 있음
spring.web.resources.static-loactions=classpath:/static/

#간단하게 주소설정을 해결하는 방법
#1. Thymeleaf 템플릿 엔진을 이용
#2. Groovy Templates 템플릿 엔진을 이용
#3. Mustache 템플릿 엔진을 이용 : html 문서를 출력하기 위해 추가로 설정을 해줘야 함
#                            만약에 설정을 해준다면 prefix (어느 폴더에서 시작하는가?)
#                                            suffix (어느 확장자명으로 종료하는가?)

#템플릿 엔진의 경우 React를 build를 하기 전까지는 사용할 필요가 없지만
#React를 build해서 사용할 경우에는 필요하기 때문에 처음부터 설정해주는 것이 좋음